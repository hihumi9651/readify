// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model Users {
  id            String    @id @map("firebase_uid") // PKとしてのFirebase ID
  email         String    @unique
  username      String
  displayName   String?   // Null許容
  createdAt     DateTime  @default(now()) @map("created_at")
  lastLoginAt   DateTime? @map("last_login_at")
  isDeleted     Boolean   @default(false) @map("is_deleted")
  deletedAt     DateTime? @map("deleted_at")

  // リレーション（本棚テーブルとの関連付け）
  bookshelves   Bookshelf[]

  @@map("users") // テーブル名の指定
}

// 本棚モデル（関連モデル）
model Bookshelf {
  id          Int       @id @default(autoincrement())
  userId      String    @map("firebase_uid")
  isbn        String
  status      BookStatus
  readCount   Int       @default(0) @map("read_count")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  notes       String?

  // リレーション
  user        User      @relation(fields: [userId], references: [id])

  // ユニーク制約
  @@unique([userId, isbn])
  @@map("bookshelves")
}

// 読書状態の列挙型
enum BookStatus {
  WANT_TO_READ @map("want_to_read")
  STACKED
  READING
  FINISHED
}